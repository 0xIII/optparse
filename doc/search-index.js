var searchIndex = JSON.parse('{\
"optparse":{"doc":"","i":[[3,"Func","optparse","holds a description of each action and the corresponding …",null,null],[12,"func_closure","","",0,null],[12,"func_description","","",0,null],[11,"new","","Creates a new instance of Func holding a boxed function …",0,[[["fn",8],["string",3],["box",3]],["func",3]]],[3,"Parser","","Handle saving and parsing flags and options",null,null],[12,"argmap","","",1,null],[12,"description","","",1,null],[11,"new","","crate a new instance of Parser ",1,[[],["parser",3]]],[11,"register","","register a new flag with a description and a function",1,[[["fn",8]]]],[11,"parse","","Parses the input vector, resolves all flags and executes …",1,[[["string",3],["vec",3]],[["error",3],["result",4]]]],[14,"parse","","parse arguments from std::env",null,null],[14,"register","","simplified registration of flags and functions",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]]],"p":[[3,"Func"],[3,"Parser"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);